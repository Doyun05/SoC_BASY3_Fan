module led_pwm_Me (
    input clk,
    input reset_p,
    input [3:0] btn,    // 버튼 입력
    output [15:0] led_debug// 16개의 PWM 출력을 위한 벡터
);

   // 버튼 입력 처리----------------------------------------------------------------------------------------------------------
    wire btn_sple, btn_light, btn_timer, btn_fmode;
    button_cntr btn0(.clk(clk), .reset_p(reset_p), .btn(btn[0]), .btn_pedge(btn_sple));
    button_cntr btn1(.clk(clk), .reset_p(reset_p), .btn(btn[1]), .btn_pedge(btn_light)); 
    button_cntr btn2(.clk(clk), .reset_p(reset_p), .btn(btn[2]), .btn_pedge(btn_timer));
    button_cntr btn3(.clk(clk), .reset_p(reset_p), .btn(btn[3]), .btn_pedge(btn_fmode));
    //------------------------------------------------------------------------------------------------------------------------

    reg [6:0] led_duty;   // 0부터 127(7'b1111111)까지의 값을 가질 수 있다.
    reg [1:0] brightness_level;  // brightness_level 범위를 2비트로 수정
    reg btn_brightness_last;      // btn_brightness의 이전 상태 추적

     // 버튼 상태 변경 및 밝기 단계 조절
    always @(posedge clk or posedge reset_p) begin
        if (reset_p) begin
            btn_brightness_last <= 1'b0;
            brightness_level <= 2'b00;
            led_duty <= 7'd0;  // 초기 듀티 사이클
        end else begin
            btn_brightness_last <= btn_light;

            if (btn_light && !btn_brightness_last) begin
                case (brightness_level)
                    2'b00: begin
                        brightness_level <= 2'b01; // 20% -> 60%
                        led_duty <= 7'd25;         // 20% 듀티 사이클
                    end
                    2'b01: begin
                        brightness_level <= 2'b10; // 60% -> 100%
                        led_duty <= 7'd76;         // 60% 듀티 사이클
                    end
                    2'b10: begin
                        brightness_level <= 2'b11; // 100% -> 20%
                        led_duty <= 7'd127;        // 100% 듀티 사이클
                    end
                    2'b11: begin
                        brightness_level <= 2'b00; // 100% -> 0%
                        led_duty <= 7'd0;          // 0% 듀티 사이클
                    end
                endcase
            end
        end
    end

    // PWM 모듈 인스턴스 (LED 제어용)
    genvar i;
    generate
        for (i = 0; i < 16; i = i + 1) begin : pwm_gen
            pwm_100step pwm_inst (
                .clk(clk),       // 클럭 신호
                .reset_p(reset_p),
                .duty(led_duty), // 듀티 사이클 설정
                .pwm(led_debug[i]) // 각 LED의 PWM 출력
            );
        end
    endgenerate
endmodule